/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ChildApplicationApplyConfiguration represents an declarative configuration of the ChildApplication type for use
// with apply.
type ChildApplicationApplyConfiguration struct {
	Changing        *string                        `json:"changing,omitempty"`
	Name            *string                        `json:"name,omitempty"`
	Controller      *string                        `json:"controller,omitempty"`
	Type            *string                        `json:"type,omitempty"`
	Port            *int                           `json:"port,omitempty"`
	Command         *string                        `json:"command,omitempty"`
	Debug           *bool                          `json:"debug,omitempty"`
	ImageName       *string                        `json:"imageName,omitempty"`
	ImageRepository *string                        `json:"imageRepository,omitempty"`
	TriggerTag      *string                        `json:"triggerTag,omitempty"`
	TriggerEnable   *bool                          `json:"triggerEnable,omitempty"`
	Pipelines       []PipelineApplyConfiguration   `json:"pipelines,omitempty"`
	Controllers     []ControllerApplyConfiguration `json:"resources,omitempty"`
}

// ChildApplicationApplyConfiguration constructs an declarative configuration of the ChildApplication type for use with
// apply.
func ChildApplication() *ChildApplicationApplyConfiguration {
	return &ChildApplicationApplyConfiguration{}
}

// WithChanging sets the Changing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Changing field is set to the value of the last call.
func (b *ChildApplicationApplyConfiguration) WithChanging(value string) *ChildApplicationApplyConfiguration {
	b.Changing = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ChildApplicationApplyConfiguration) WithName(value string) *ChildApplicationApplyConfiguration {
	b.Name = &value
	return b
}

// WithController sets the Controller field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Controller field is set to the value of the last call.
func (b *ChildApplicationApplyConfiguration) WithController(value string) *ChildApplicationApplyConfiguration {
	b.Controller = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ChildApplicationApplyConfiguration) WithType(value string) *ChildApplicationApplyConfiguration {
	b.Type = &value
	return b
}

// WithPort sets the Port field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Port field is set to the value of the last call.
func (b *ChildApplicationApplyConfiguration) WithPort(value int) *ChildApplicationApplyConfiguration {
	b.Port = &value
	return b
}

// WithCommand sets the Command field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Command field is set to the value of the last call.
func (b *ChildApplicationApplyConfiguration) WithCommand(value string) *ChildApplicationApplyConfiguration {
	b.Command = &value
	return b
}

// WithDebug sets the Debug field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Debug field is set to the value of the last call.
func (b *ChildApplicationApplyConfiguration) WithDebug(value bool) *ChildApplicationApplyConfiguration {
	b.Debug = &value
	return b
}

// WithImageName sets the ImageName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageName field is set to the value of the last call.
func (b *ChildApplicationApplyConfiguration) WithImageName(value string) *ChildApplicationApplyConfiguration {
	b.ImageName = &value
	return b
}

// WithImageRepository sets the ImageRepository field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageRepository field is set to the value of the last call.
func (b *ChildApplicationApplyConfiguration) WithImageRepository(value string) *ChildApplicationApplyConfiguration {
	b.ImageRepository = &value
	return b
}

// WithTriggerTag sets the TriggerTag field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TriggerTag field is set to the value of the last call.
func (b *ChildApplicationApplyConfiguration) WithTriggerTag(value string) *ChildApplicationApplyConfiguration {
	b.TriggerTag = &value
	return b
}

// WithTriggerEnable sets the TriggerEnable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TriggerEnable field is set to the value of the last call.
func (b *ChildApplicationApplyConfiguration) WithTriggerEnable(value bool) *ChildApplicationApplyConfiguration {
	b.TriggerEnable = &value
	return b
}

// WithPipelines adds the given value to the Pipelines field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Pipelines field.
func (b *ChildApplicationApplyConfiguration) WithPipelines(values ...*PipelineApplyConfiguration) *ChildApplicationApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPipelines")
		}
		b.Pipelines = append(b.Pipelines, *values[i])
	}
	return b
}

// WithControllers adds the given value to the Controllers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Controllers field.
func (b *ChildApplicationApplyConfiguration) WithControllers(values ...*ControllerApplyConfiguration) *ChildApplicationApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithControllers")
		}
		b.Controllers = append(b.Controllers, *values[i])
	}
	return b
}
