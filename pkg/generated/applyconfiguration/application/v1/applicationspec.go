/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ApplicationSpecApplyConfiguration represents an declarative configuration of the ApplicationSpec type for use
// with apply.
type ApplicationSpecApplyConfiguration struct {
	Owner           *string                              `json:"owner,omitempty"`
	Public          *bool                                `json:"public,omitempty"`
	Template        *string                              `json:"template,omitempty"`
	ImageRepository *string                              `json:"imageRepository,omitempty"`
	ImageName       *string                              `json:"imageName,omitempty"`
	Namespace       *string                              `json:"namespace,omitempty"`
	ServiceType     *string                              `json:"serviceType,omitempty"`
	DefaultPort     *int                                 `json:"defaultPort,omitempty"`
	GitAddr         *string                              `json:"gitAddr,omitempty"`
	ChildApps       []ChildApplicationApplyConfiguration `json:"childApps,omitempty"`
}

// ApplicationSpecApplyConfiguration constructs an declarative configuration of the ApplicationSpec type for use with
// apply.
func ApplicationSpec() *ApplicationSpecApplyConfiguration {
	return &ApplicationSpecApplyConfiguration{}
}

// WithOwner sets the Owner field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Owner field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithOwner(value string) *ApplicationSpecApplyConfiguration {
	b.Owner = &value
	return b
}

// WithPublic sets the Public field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Public field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithPublic(value bool) *ApplicationSpecApplyConfiguration {
	b.Public = &value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithTemplate(value string) *ApplicationSpecApplyConfiguration {
	b.Template = &value
	return b
}

// WithImageRepository sets the ImageRepository field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageRepository field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithImageRepository(value string) *ApplicationSpecApplyConfiguration {
	b.ImageRepository = &value
	return b
}

// WithImageName sets the ImageName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageName field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithImageName(value string) *ApplicationSpecApplyConfiguration {
	b.ImageName = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithNamespace(value string) *ApplicationSpecApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithServiceType sets the ServiceType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceType field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithServiceType(value string) *ApplicationSpecApplyConfiguration {
	b.ServiceType = &value
	return b
}

// WithDefaultPort sets the DefaultPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefaultPort field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithDefaultPort(value int) *ApplicationSpecApplyConfiguration {
	b.DefaultPort = &value
	return b
}

// WithGitAddr sets the GitAddr field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GitAddr field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithGitAddr(value string) *ApplicationSpecApplyConfiguration {
	b.GitAddr = &value
	return b
}

// WithChildApps adds the given value to the ChildApps field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ChildApps field.
func (b *ApplicationSpecApplyConfiguration) WithChildApps(values ...*ChildApplicationApplyConfiguration) *ApplicationSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithChildApps")
		}
		b.ChildApps = append(b.ChildApps, *values[i])
	}
	return b
}
